import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score
from keras.models import Sequential
from keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

df = pd.read_excel('/content/xgboostveri.xlsx')


X_columns = ['gdp', 'gds', 'ind', 'rnw']
y_column = 'efp'


countries = df['country'].unique()

colors = list(mcolors.TABLEAU_COLORS.values())


for idx, country in enumerate(countries):
    # Ülkeye ait veriyi filtreleyin
    country_data = df[df['country'] == country]

    # Bağımsız ve bağımlı değişkenleri seçin
    X = country_data[X_columns]
    y = country_data[y_column]

    # Min-Max ölçekleme uygulayın
    scaler_X = MinMaxScaler()
    X_scaled = scaler_X.fit_transform(X)

    scaler_y = MinMaxScaler()
    y_scaled = scaler_y.fit_transform(y.values.reshape(-1, 1))

    
    look_back = 3  # Örnek: 3 yıl önceki verileri kullan
    X_lstm, y_lstm = [], []
    for i in range(len(X_scaled) - look_back):
        X_lstm.append(X_scaled[i:(i + look_back), :])
        y_lstm.append(y_scaled[i + look_back])

    X_lstm, y_lstm = np.array(X_lstm), np.array(y_lstm)

    
    train_size = int(len(X_lstm) * 0.8)
    X_train, X_test = X_lstm[:train_size], X_lstm[train_size:]
    y_train, y_test = y_lstm[:train_size], y_lstm[train_size:]

  
    model = Sequential()
    model.add(LSTM(units=50, input_shape=(X_train.shape[1], X_train.shape[2])))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mean_squared_error')

   
    model.fit(X_train, y_train, epochs=1000, batch_size=32, verbose=0)

   
    X_future = X_scaled[-look_back:].reshape(1, look_back, -1)
    predictions = []

    for i in range(2035 - 2022 + 1):
        prediction = model.predict(X_future)
        predictions.append(prediction)
        X_future = np.roll(X_future, -1)
        X_future[0, -1, :] = prediction

 
    predictions_inverse = scaler_y.inverse_transform(np.array(predictions).reshape(-1, 1))

   
    y_future = y[-(2035 - 2022 + 1):].values.reshape(-1, 1)
    years = np.arange(2022, 2036)


    mse = mean_squared_error(y_future, predictions_inverse)
    r2 = r2_score(y_future, predictions_inverse)

    print(f'Mean Squared Error for {country}: {mse}')
    print(f'R^2 Score for {country}: {r2}')


    plt.figure(figsize=(10, 6))
    plt.plot(years, y_future, label=f'{country} - Gerçek Değerler', color=colors[idx], linestyle='dashed')
    plt.plot(years, predictions_inverse, label=f'{country} - Tahminler (MSE: {mse:.4f}, R^2: {r2:.4f})', color=colors[idx])
    plt.legend()
    plt.xlabel('Year')
    plt.ylabel('EFP Value')
    plt.title(f'EFP Predictions for {country}')
    plt.show()


    print(f'\nPredictions for {country} (2022-2035):')
    print(pd.DataFrame({'Year': years, 'Predictions': predictions_inverse.flatten()}))
